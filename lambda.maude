mod LAMBDA is
    including BOOL .
    including QID .

    sorts Variable UntypedVariable Term .
    subsort Variable Bool < Term .
    subsort Qid < UntypedVariable .
    subsort UntypedVariable < Variable .

    --- Calculus
    op λ_._ : Variable Term -> Term [ctor gather (e E) prec 121] .
    op __ : Term Term -> Term [ctor gather (E e) prec 120] .
    op if_then_else_ : Bool Term Term -> Term .

    var b : Bool .
    var x : UntypedVariable .
    vars t₁ t₂ : Term .

    rl (λ x . t₁) t₂ => [x ↦ t₂]t₁ .

    crl if b then t₁ else t₂ => t₁ if b .
    crl if b then t₁ else t₂ => t₂ if not b .

    --- Free variables
    sort VariableSet .
    subsort Variable < VariableSet .

    op empty : -> VariableSet [ctor] .
    op _,_ : VariableSet VariableSet -> VariableSet [ctor assoc comm id: empty prec 100] .
    op _\_ : VariableSet VariableSet -> VariableSet [prec 101] .
    op _∈_ : Variable VariableSet -> Bool [prec 101] .
    op _∉_ : Variable VariableSet -> Bool [prec 101] .

    var v : Variable .
    var S₁ S₂ : VariableSet .

    eq v, v, S₁ = v, S₁ .

    eq S₁, v \ v, S₂  = S₁ \ S₂ .
    eq S₁ \ S₂        = S₁ [owise] .

    eq v ∈ v, S₁ = true .
    eq v ∈ S₁    = false [owise] .

    eq v ∉ S₁    = not (v ∈ S₁) .

    op FV_ : Term -> VariableSet .

    eq FV(x)        = x .
    eq FV(λ x . t₁) = FV(t₁) \ x .
    eq FV(t₁ t₂)    = FV(t₁), FV(t₂) .

    --- Substitution
    op [_↦_]_ : Variable Term Term -> Term .

    var y : Variable .
    var s : Term .

    eq  [x ↦ s]x          = s .
    ceq [x ↦ s]y          = y                  if x =/= y .
    eq  [x ↦ s](λ x . t₁) = (λ x . t₁) .
    ceq [x ↦ s](λ y . t₁) = (λ y . [x ↦ s]t₁)  if x =/= y /\ y ∉ FV(s) .
    eq  [x ↦ s](t₁ t₂)    = [x ↦ s]t₁ [x ↦ s]t₂ .
endm

mod CHURCH-BOOLEAN is
    including LAMBDA .

    ops tru fls test and or not : -> Term .

    vars t f : Variable .

    eq tru = λ 't . λ 'f . 't .
    eq fls = λ 't . λ 'f . 'f .

    eq test = λ 'l . λ 'm . λ 'n . 'l 'm 'n .

    eq and = λ 'b . λ 'c . 'b 'c fls .
endm

--- Examples
rew test tru 'v 'w .
rew test fls 'v 'w .

rew and tru tru .
rew and tru fls .


mod SIMPLY-TYPED-LAMBDA-CALCULUS is
    including LAMBDA .

    sorts Type TypedTerm TypedVariable Judgement TypeContext .
    subsort TypedVariable < Variable .
    subsort VariableSet < TypeContext .
    subsort Judgement < Bool .

    op Boolean : -> Type [ctor] .
    op _:_ : Term Type -> TypedTerm [ctor prec 124] .
    op _::_ : UntypedVariable Type -> TypedVariable [ctor prec 50] .
    op ⊢_ : TypedTerm -> Judgement [ctor frozen prec 125] .
    op _⊢_ : TypeContext TypedTerm -> Judgement [ctor frozen prec 125] .
    op _→_ : Type Type -> Type [ctor] .

    vars T T₁ T₂ : Type .
    vars t₁ t₂ t₃ : Term .
    var x : UntypedVariable .
    var Γ : TypeContext .

    eq ⊢ t₁ : T = empty ⊢ t₁ : T .

    rl Γ ⊢ true : Boolean => true .

    rl Γ ⊢ false : Boolean => true .

    rl Γ ⊢ x : T => x :: T ∈ Γ .

    crl Γ ⊢ (λ (x :: T₁) . t₂) : T₁ → T₂ => true
        if  Γ, x :: T₁ ⊢ t₂ : T₂ => true .

    crl Γ ⊢ t₁ t₂ : T => true
      if  λ (x :: T₂) . t₃ := t₁ /\
          Γ ⊢ t₁ : T₂ → T => true /\
          Γ ⊢ t₂ : T₂ => true .

    crl Γ ⊢ if t₁ then t₂ else t₃ : T => true
        if  Γ ⊢ t₁ : Boolean => true /\
            Γ ⊢ t₂ : T => true /\
            Γ ⊢ t₃ : T => true .
endm
